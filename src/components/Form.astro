---
import { actions } from "astro:actions";
import { FormularioConfiguracion, Tono } from "../types/index";
import type { AirtableRecord } from "../types/airtable";
import Spinner from "./Spinner.astro";

export const prerender = false;

const { data, error } = await Astro.callAction(
  actions.obtenerDatosConfiguracion,
  undefined
);

if (error) console.error(error);

// Transform Airtable data to form data structure
const airtableData = data?.data as AirtableRecord | undefined;
const fields = airtableData?.fields as FormularioConfiguracion | undefined;

const formData: FormularioConfiguracion = {
  NombreAsistente: fields?.NombreAsistente || "",
  NombreEmpresa: fields?.NombreEmpresa || "",
  DescripcionEmpresa: fields?.DescripcionEmpresa || "",
  Objetivo: fields?.Objetivo || "",
  Tono: fields?.Tono || Tono.Profesional,
  Sector: fields?.Sector || "",
  Personalidad: fields?.Personalidad || "",
  ClientesObjetivos: fields?.ClientesObjetivos || "",
  PreguntasFrecuentes: fields?.PreguntasFrecuentes || "",
  PreguntasCalificacion: fields?.PreguntasCalificacion || "",
  EjemplosConversaciones: fields?.EjemplosConversaciones || "",
  ManejoObjeciones: fields?.ManejoObjeciones || "",
  ProductosNoDisponibles: fields?.ProductosNoDisponibles || "",
};
---
<div id="alertContainer" class="absolute top-0 right-0 z-50"></div>
<form
  id="configForm"
  class="w-full px-10 pb-10"
  method="POST"
  action={actions.guardarCambiosConfiguracion}
>
  <div class="relative h-[75vh] overflow-y-auto flex flex-col gap-5">
    <div class="grid grid-cols-3 gap-10">
      <div class="flex flex-col gap-2">
        <label
          for="NombreAsistente"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="El nombre que tendrá tu asistente virtual. Este nombre será visible para tus clientes."
        >
          Nombre del asistente
          <span class="text-red-500 ml-1">*</span>
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <input
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-12"
          type="text"
          id="NombreAsistente"
          name="NombreAsistente"
          placeholder="Ingrese el nombre del asistente"
          value={formData.NombreAsistente}
          required
          aria-label="Nombre del asistente"
          aria-describedby="NombreAsistente-description"
        />
        <span id="NombreAsistente-description" class="sr-only">
          El nombre que tendrá tu asistente virtual. Este nombre será visible para tus clientes.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="NombreEmpresa"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="El nombre de tu empresa o negocio. Este nombre será usado por el asistente para referirse a tu empresa."
        >
          Nombre de la empresa
          <span class="text-red-500 ml-1">*</span>
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <input
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-12"
          type="text"
          id="NombreEmpresa"
          name="NombreEmpresa"
          placeholder="Ingrese el nombre de la empresa"
          value={formData.NombreEmpresa}
          required
          aria-label="Nombre de la empresa"
          aria-describedby="NombreEmpresa-description"
        />
        <span id="NombreEmpresa-description" class="sr-only">
          El nombre de tu empresa o negocio. Este nombre será usado por el asistente para referirse a tu empresa.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="Tono"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Define el estilo de comunicación del asistente. Profesional: formal y directo. Informal: cercano y casual. Técnico: especializado y detallado. Cercano: amigable y personal. Empático: comprensivo y emocional."
        >
          Tono
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <div class="relative">
          <select
            id="Tono"
            name="Tono"
            class="w-full bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] appearance-none pr-10 h-12"
            value={formData.Tono}
            required
            aria-label="Tono de comunicación"
            aria-describedby="Tono-description"
          >
            <option value="">Seleccione el tono del asistente</option>
            <option
              value={Tono.Profesional}
              selected={formData.Tono === Tono.Profesional}
              >Profesional</option
            >
            <option
              value={Tono.Informal}
              selected={formData.Tono === Tono.Informal}
              >Informal</option
            >
            <option
              value={Tono.Tecnico}
              selected={formData.Tono === Tono.Tecnico}
              >Técnico</option
            >
            <option
              value={Tono.Cercano}
              selected={formData.Tono === Tono.Cercano}
              >Cercano</option
            >
            <option
              value={Tono.Empatico}
              selected={formData.Tono === Tono.Empatico}
              >Empático</option
            >
          </select>
          <span id="Tono-description" class="sr-only">
            Define el estilo de comunicación del asistente. Profesional: formal y directo. Informal: cercano y casual. Técnico: especializado y detallado. Cercano: amigable y personal. Empático: comprensivo y emocional.
          </span>
          <img
            width="16"
            height="16"
            src="/circle-arrow-down.svg"
            alt="Icono de flecha hacia abajo"
            class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none"
          />
        </div>
      </div>
    </div>

    <div class="grid grid-cols-3 gap-10">
      <div class="flex flex-col gap-2">
        <label
          for="Sector"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="El sector o industria en la que opera tu empresa. Esto ayuda al asistente a entender mejor el contexto de tu negocio."
        >
          Sector
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <input
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-12"
          type="text"
          id="Sector"
          name="Sector"
          placeholder="Ingrese el sector de la empresa"
          value={formData.Sector}
          aria-label="Sector de la empresa"
          aria-describedby="Sector-description"
        />
        <span id="Sector-description" class="sr-only">
          El sector o industria en la que opera tu empresa. Esto ayuda al asistente a entender mejor el contexto de tu negocio.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="ClientesObjetivos"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Describe el perfil de tus clientes ideales. Incluye características demográficas, necesidades y comportamientos."
        >
          Objetivo
          <span class="text-red-500 ml-1">*</span>
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <input
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-12"
          type="text"
          id="ClientesObjetivos"
          name="ClientesObjetivos"
          placeholder="Ingrese los clientes objetivo del asistente"
          value={formData.ClientesObjetivos}
          required
          aria-label="Clientes objetivos"
          aria-describedby="ClientesObjetivos-description"
        />
        <span id="ClientesObjetivos-description" class="sr-only">
          Describe el objetivo de tu asistente virtual. Por ejemplo: vender, informar, resolver dudas, etc.
        </span>
      </div>
    </div>

    <div class="flex flex-col gap-5">
      <div class="flex flex-col gap-2">
        <label
          for="DescripcionEmpresa"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Una descripción detallada de tu empresa, incluyendo su misión, visión y valores. Esto ayuda al asistente a representar mejor tu marca."
        >
          Descripción de la empresa
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="DescripcionEmpresa"
          name="DescripcionEmpresa"
          placeholder="Ingrese la descripción de la empresa"
          aria-label="Descripción de la empresa"
          aria-describedby="DescripcionEmpresa-description"
          >{formData.DescripcionEmpresa}</textarea
        >
        <span id="DescripcionEmpresa-description" class="sr-only">
          Una descripción detallada de tu empresa, incluyendo su misión, visión y valores. Esto ayuda al asistente a representar mejor tu marca.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="Personalidad"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Define la personalidad y el estilo de comunicación del asistente. Incluye cómo debe comportarse, qué tono usar y cómo debe interactuar con los clientes."
        >
          Personalidad
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="Personalidad"
          name="Personalidad"
          placeholder="Ingrese el comportamiento del asistente"
          aria-label="Personalidad del asistente"
          aria-describedby="Personalidad-description"
          >{formData.Personalidad}</textarea
        >
        <span id="Personalidad-description" class="sr-only">
          Define la personalidad y el estilo de comunicación del asistente. Incluye cómo debe comportarse, qué tono usar y cómo debe interactuar con los clientes.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="PreguntasCalificacion"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Preguntas que el asistente debe hacer para calificar y entender mejor las necesidades del cliente."
        >
          Preguntas de calificación
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="PreguntasCalificacion"
          name="PreguntasCalificacion"
          placeholder="Ingrese las preguntas de calificacion"
          aria-label="Preguntas de calificación"
          aria-describedby="PreguntasCalificacion-description"
          >{formData.PreguntasCalificacion}</textarea
        >
        <span id="PreguntasCalificacion-description" class="sr-only">
          Preguntas que el asistente debe hacer para calificar y entender mejor las necesidades del cliente.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="PreguntasFrecuentes"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Temas y preguntas frecuentes que el asistente debe conocer y poder responder."
        >
          Temas Frecuentes
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="PreguntasFrecuentes"
          name="PreguntasFrecuentes"
          placeholder="Ingrese preguntas frecuentes"
          aria-label="Temas frecuentes"
          aria-describedby="PreguntasFrecuentes-description"
          >{formData.PreguntasFrecuentes}</textarea
        >
        <span id="PreguntasFrecuentes-description" class="sr-only">
          Temas y preguntas frecuentes que el asistente debe conocer y poder responder.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="EjemplosConversaciones"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Ejemplos de conversaciones exitosas que el asistente puede usar como referencia para interactuar con los clientes."
        >
          Ejemplos de conversaciones
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="EjemplosConversaciones"
          name="EjemplosConversaciones"
          placeholder="Ingrese algunos ejemplos de conversaciones"
          aria-label="Ejemplos de conversaciones"
          aria-describedby="EjemplosConversaciones-description"
          >{formData.EjemplosConversaciones}</textarea
        >
        <span id="EjemplosConversaciones-description" class="sr-only">
          Ejemplos de conversaciones exitosas que el asistente puede usar como referencia para interactuar con los clientes.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="ManejoObjeciones"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Cómo el asistente debe manejar objeciones y situaciones difíciles con los clientes."
        >
          Casos de errores
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="ManejoObjeciones"
          name="ManejoObjeciones"
          placeholder="Ingrese algunos casos de errores"
          aria-label="Casos de errores"
          aria-describedby="ManejoObjeciones-description"
          >{formData.ManejoObjeciones}</textarea
        >
        <span id="ManejoObjeciones-description" class="sr-only">
          Cómo el asistente debe manejar objeciones y situaciones difíciles con los clientes.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="ProductosNoDisponibles"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="Lista de productos o servicios que no están disponibles y cómo el asistente debe comunicarlo a los clientes."
        >
          Productos no disponibles
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="ProductosNoDisponibles"
          name="ProductosNoDisponibles"
          placeholder="Ingrese los productos no disponibles"
          aria-label="Productos no disponibles"
          aria-describedby="ProductosNoDisponibles-description"
          >{formData.ProductosNoDisponibles}</textarea
        >
        <span id="ProductosNoDisponibles-description" class="sr-only">
          Lista de productos o servicios que no están disponibles y cómo el asistente debe comunicarlo a los clientes.
        </span>
      </div>
      <div class="flex flex-col gap-2">
        <label
          for="Objetivo"
          class="text-[#7806F1] text-xl font-bold flex items-center gap-2 group relative"
          title="El objetivo principal del asistente al interactuar con los clientes. Por ejemplo: vender, informar, resolver dudas, etc."
        >
          Objetivo
          <span class="text-[#7806F1] text-sm cursor-help">ⓘ</span>
        </label>
        <textarea
          class="bg-white p-2 border border-[#ddd] rounded-xl focus:outline-1 outline-[#7806F1] h-[150px]"
          id="Objetivo"
          name="Objetivo"
          placeholder="Ingrese el objetivo del asistente"
          required
          aria-label="Objetivo del asistente"
          aria-describedby="Objetivo-description"
          >{formData.Objetivo}</textarea
        >
        <span id="Objetivo-description" class="sr-only">
          El objetivo principal del asistente al interactuar con los clientes. Por ejemplo: vender, informar, resolver dudas, etc.
        </span>
      </div>
    </div>

    <div class="flex items-center justify-center gap-4 fixed bottom-10 left-0 right-0">
      <button
        type="submit"
        class="bg-[#976FF1] py-2 px-5 rounded-lg text-white text-lg w-48 hover:cursor-pointer transition-all duration-150 active:scale-95 flex items-center justify-center gap-2"
      >
        <span id="buttonText">Guardar Cambios</span>
        <div
          id="spinner"
          class="hidden"
        >
          <Spinner size="small" />
        </div>
      </button>
    </div>
  </div>
</form>

<script>
  import { actions } from "astro:actions";
  import { Tono } from "../types/index";

  const form = document.getElementById("configForm") as HTMLFormElement;
  const spinner = document.getElementById("spinner") as HTMLDivElement;
  const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
  const alertContainer = document.getElementById(
    "alertContainer"
  ) as HTMLDivElement;

  function showAlert(type: "success" | "error", message: string) {
    const alertElement = document.createElement("div");
    alertContainer.innerHTML = "";
    alertContainer.appendChild(alertElement);

    const alert = document.createElement("div");
    alert.className = `p-4 mb-4 rounded-lg relative ${
      type === "success"
        ? "bg-green-100 text-green-700"
        : "bg-red-100 text-red-700"
    }`;
    
    // Contenedor del mensaje
    const messageContainer = document.createElement("div");
    messageContainer.className = "pr-8"; // Espacio para el botón de cerrar
    messageContainer.textContent = message;
    alert.appendChild(messageContainer);

    // Botón de cerrar
    const closeButton = document.createElement("button");
    closeButton.className = "absolute top-2 right-2 text-gray-500 hover:text-gray-700 focus:outline-none hover:cursor-pointer";
    closeButton.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    `;
    closeButton.addEventListener("click", () => {
      alertElement.remove();
    });
    alert.appendChild(closeButton);

    alertElement.appendChild(alert);

    // Auto-cerrar después de 10 segundos
    setTimeout(() => {
      alertElement.remove();
    }, 10000);
  }

  function setLoading(isLoading: boolean) {
    if (isLoading) {
      spinner.classList.remove("hidden");
      buttonText.textContent = "Guardando...";
      form.querySelectorAll("input, select, textarea").forEach((el) => {
        (el as HTMLElement).setAttribute("disabled", "true");
      });
    } else {
      spinner.classList.add("hidden");
      buttonText.textContent = "Guardar Cambios";
      form.querySelectorAll("input, select, textarea").forEach((el) => {
        (el as HTMLElement).removeAttribute("disabled");
      });
    }
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);

    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    // Transform form data to match Airtable structure
    const airtableData = {
      fields: {
        NombreAsistente: formData.get("NombreAsistente") as string,
        NombreEmpresa: formData.get("NombreEmpresa") as string,
        DescripcionEmpresa: formData.get("DescripcionEmpresa") as string || '',
        Objetivo: formData.get("Objetivo") as string || '',
        Tono: formData.get("Tono") as Tono,
        Sector: formData.get("Sector") as string || '',
        Personalidad: formData.get("Personalidad") as string || '',
        ClientesObjetivos: formData.get("ClientesObjetivos") as string,
        PreguntasFrecuentes: formData.get("PreguntasFrecuentes") as string || '',
        PreguntasCalificacion: formData.get("PreguntasCalificacion") as string || '',
        EjemplosConversaciones: formData.get("EjemplosConversaciones") as string || '',
        ManejoObjeciones: formData.get("ManejoObjeciones") as string || '',
        ProductosNoDisponibles: formData.get("ProductosNoDisponibles") as string || '',
      }
    };

    setLoading(true);

    try {
      const { data, error } = await actions.guardarCambiosConfiguracion(airtableData);

      if (error) {
        console.error('Error:', error);
        showAlert("error", "Error al guardar los cambios");
      } else if (data?.success) {
        showAlert("success", "Cambios guardados exitosamente");
      } else {
        showAlert("error", "Error al guardar los cambios");
      }
    } catch (error) {
      console.error("Error completo:", error);
      let errorMessage = "Error al guardar los cambios";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      showAlert("error", errorMessage);
    } finally {
      setLoading(false);
    }
  });
</script>
